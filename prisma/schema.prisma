generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AboutMe {
  about_id     Int       @id @default(autoincrement())
  org_name     String?   @db.VarChar(255)
  description  String?
  mission      String?
  vision       String?
  email        String?   @db.VarChar(255)
  phone        String?   @db.VarChar(50)
  hotline      String?   @db.VarChar(50)
  website      String?   @db.VarChar(255)
  address      String?
  facebook_url String?   @db.VarChar(255)
  zalo_url     String?   @db.VarChar(255)
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  updated_at   DateTime? @default(now()) @db.Timestamp(6)
  created_by   String?   @db.VarChar(50)
  updated_by   String?   @db.VarChar(50)
  version      Int?      @default(1)

  branch Branch[]

  @@map("about_me")
}

model Branch {
  branch_id     Int       @id @default(autoincrement())
  about_id      Int
  branch_name   String    @db.VarChar(255)
  address       String
  phone         String?   @db.VarChar(50)
  latitude      Decimal?  @db.Decimal(10, 6)
  longitude     Decimal?  @db.Decimal(10, 6)
  opening_hours Json?
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  updated_at    DateTime? @default(now()) @db.Timestamp(6)
  created_by    String?   @db.VarChar(50)
  updated_by    String?   @db.VarChar(50)
  version       Int?      @default(1)

  AboutMe AboutMe @relation(fields: [about_id], references: [about_id], onDelete: Cascade, onUpdate: NoAction)

  @@index([about_id], map: "idx_branch_about")
  @@map("branch")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Comment {
  comment_id        Int       @id @default(autoincrement())
  user_id           Int?
  course_id         Int?
  news_id           Int?
  knowledge_id      Int?
  parent_comment_id Int?
  content           String
  is_approved       Boolean?  @default(true)
  created_at        DateTime? @default(now()) @db.Timestamp(6)
  updated_at        DateTime? @default(now()) @db.Timestamp(6)
  created_by        String?   @db.VarChar(50)
  updated_by        String?   @db.VarChar(50)
  version           Int?      @default(1)

  Course    Course?    @relation(fields: [course_id], references: [course_id], onDelete: Cascade, onUpdate: NoAction)
  Knowledge Knowledge? @relation(fields: [knowledge_id], references: [knowledge_id], onDelete: Cascade, onUpdate: NoAction)
  news      News?      @relation(fields: [news_id], references: [news_id], onDelete: Cascade, onUpdate: NoAction)
  comment   Comment?   @relation("commentTocomment", fields: [parent_comment_id], references: [comment_id], onDelete: Cascade, onUpdate: NoAction)
  Comment   Comment[]  @relation("commentTocomment")
  User      User?      @relation(fields: [user_id], references: [user_id], onUpdate: NoAction)

  @@index([course_id], map: "idx_comment_course")
  @@index([knowledge_id], map: "idx_comment_knowledge")
  @@index([news_id], map: "idx_comment_news")
  @@index([parent_comment_id], map: "idx_comment_parent")
  @@map("comment")
}

model Commitment {
  commitment_id  Int       @id @default(autoincrement())
  title          String    @db.VarChar(255)
  content        String?
  is_active      Boolean?  @default(true)
  priority       Int?      @default(0)
  course_id      Int?
  effective_from DateTime? @db.Date
  effective_to   DateTime? @db.Date
  created_at     DateTime? @default(now()) @db.Timestamp(6)
  updated_at     DateTime? @default(now()) @db.Timestamp(6)
  created_by     String?   @db.VarChar(50)
  updated_by     String?   @db.VarChar(50)
  version        Int?      @default(1)

  course Course? @relation(fields: [course_id], references: [course_id], onUpdate: NoAction)

  @@index([is_active], map: "idx_commitment_active")
  @@index([course_id], map: "idx_commitment_course")
  @@map("commitment")
}

model ConsultationRequest {
  consultation_request_id Int            @id @default(autoincrement())
  full_name               String         @db.VarChar(255)
  email                   String         @db.VarChar(255)
  phone                   String?        @db.VarChar(30)
  course_id               Int?
  message                 String?
  ContactMethod           ContactMethod?
  status                  ConsultStatus  @default(PENDING)
  preferred_time          DateTime?      @db.Timestamp(6)
  source                  String?        @db.VarChar(50)
  assigned_to             Int?
  created_at              DateTime?      @default(now()) @db.Timestamp(6)
  updated_at              DateTime?      @default(now()) @db.Timestamp(6)
  created_by              String?        @db.VarChar(50)
  updated_by              String?        @db.VarChar(50)
  version                 Int?           @default(1)

  user   User?   @relation(fields: [assigned_to], references: [user_id], onUpdate: NoAction)
  course Course? @relation(fields: [course_id], references: [course_id], onUpdate: NoAction)

  @@index([course_id], map: "idx_consult_course")
  @@index([status], map: "idx_consult_status")
  @@map("consultation_request")
}

model Course {
  course_id         Int         @id @default(autoincrement())
  course_code       String?     @unique @db.VarChar(50)
  course_name       String      @db.VarChar(255)
  slug              String?     @unique @db.VarChar(255)
  short_description String?
  description       String?
  level             CourseLevel @default(BEGINNER)
  mode              CourseMode  @default(ONLINE)
  language          String?     @default("en") @db.VarChar(50)
  price             Decimal?    @default(0) @db.Decimal(12, 2)
  duration_hours    Int?
  start_date        DateTime?   @db.Date
  end_date          DateTime?   @db.Date
  image_url         String?
  created_at        DateTime?   @default(now()) @db.Timestamp(6)
  updated_at        DateTime?   @default(now()) @db.Timestamp(6)
  created_by        String?     @db.VarChar(50)
  updated_by        String?     @db.VarChar(50)
  version           Int?        @default(1)

  comment              Comment[]
  commitment           Commitment[]
  consultation_request ConsultationRequest[]
  enrollment           Enrollment[]
  review               Review[]

  @@index([level], map: "idx_course_level")
  @@index([mode], map: "idx_course_mode")
  @@index([slug], map: "idx_course_slug")
  @@map("course")
}

model Enrollment {
  enrollment_id  Int              @id @default(autoincrement())
  student_id     Int
  course_id      Int
  status         EnrollmentStatus @default(REGISTERED)
  PaymentStatus  PaymentStatus    @default(UNPAID)
  payment_amount Decimal?         @default(0) @db.Decimal(12, 2)
  registered_at  DateTime?        @default(now()) @db.Timestamp(6)
  started_at     DateTime?        @db.Timestamp(6)
  completed_at   DateTime?        @db.Timestamp(6)
  created_at     DateTime?        @default(now()) @db.Timestamp(6)
  updated_at     DateTime?        @default(now()) @db.Timestamp(6)
  created_by     String?          @db.VarChar(50)
  updated_by     String?          @db.VarChar(50)
  version        Int?             @default(1)

  course  Course  @relation(fields: [course_id], references: [course_id], onDelete: Cascade, onUpdate: NoAction)
  student Student @relation(fields: [student_id], references: [student_id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([student_id, course_id], map: "uq_enrollment")
  @@index([course_id], map: "idx_enrollment_course")
  @@index([student_id], map: "idx_enrollment_student")
  @@map("enrollment")
}

model Knowledge {
  knowledge_id    Int           @id @default(autoincrement())
  title           String        @db.VarChar(255)
  slug            String        @unique @db.VarChar(255)
  content         String
  cover_image_url String?
  status          PublishStatus @default(DRAFT)
  published_at    DateTime?     @db.Timestamp(6)
  author_id       Int?
  created_at      DateTime?     @default(now()) @db.Timestamp(6)
  updated_at      DateTime?     @default(now()) @db.Timestamp(6)
  created_by      String?       @db.VarChar(50)
  updated_by      String?       @db.VarChar(50)
  version         Int?          @default(1)

  comment Comment[]
  user    User?     @relation(fields: [author_id], references: [user_id], onUpdate: NoAction)

  @@index([published_at], map: "idx_knowledge_published_at")
  @@index([status], map: "idx_knowledge_status")
  @@map("knowledge")
}

model News {
  news_id         Int           @id @default(autoincrement())
  title           String        @db.VarChar(255)
  slug            String        @unique @db.VarChar(255)
  summary         String?
  content         String
  cover_image_url String?
  status          PublishStatus @default(DRAFT)
  published_at    DateTime?     @db.Timestamp(6)
  author_id       Int?
  created_at      DateTime?     @default(now()) @db.Timestamp(6)
  updated_at      DateTime?     @default(now()) @db.Timestamp(6)
  created_by      String?       @db.VarChar(50)
  updated_by      String?       @db.VarChar(50)
  version         Int?          @default(1)

  comment Comment[]
  user    User?     @relation(fields: [author_id], references: [user_id], onUpdate: NoAction)

  @@index([published_at], map: "idx_news_published_at")
  @@index([status], map: "idx_news_status")
  @@map("news")
}

model Permission {
  permission_id          Int       @id @default(autoincrement())
  permission_name        String    @unique @db.VarChar(50)
  permission_description String?
  created_at             DateTime? @default(now()) @db.Timestamp(6)
  updated_at             DateTime? @default(now()) @db.Timestamp(6)
  created_by             String?   @db.VarChar(50)
  updated_by             String?   @db.VarChar(50)
  version                Int?      @default(1)

  role_permission RolePermission[]

  @@map("permission")
}

model RefreshToken {
  id              Int       @id @default(autoincrement())
  user_id         Int
  jti             String    @unique @db.VarChar(100) // ID duy nhất cho từng refresh token
  token_hash      String    @db.VarChar(255) // Chỉ lưu hash, KHÔNG lưu token thô
  session_id      String    @db.Uuid // 👈 ID phiên (ổn định cho 1 thiết bị)
  device_name     String? // tên thiết bị do client gửi (tuỳ chọn)
  user_agent      String? // UA để hiển thị
  ip              String?   @db.VarChar(45) // hoặc @db.Inet nếu bản Prisma của bạn hỗ trợ
  expires_at      DateTime
  last_used_at    DateTime? @default(now())
  revoked_at      DateTime?
  replaced_by_jti String? // 👈 xoay vòng: token mới thay thế token cũ
  created_at      DateTime? @default(now()) @db.Timestamp(6)
  updated_at      DateTime? @default(now()) @db.Timestamp(6)
  created_by      String?   @db.VarChar(50)
  updated_by      String?   @db.VarChar(50)
  version         Int?      @default(1)

  user User @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)

  @@map("refresh_token")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Review {
  review_id   Int       @id @default(autoincrement())
  course_id   Int
  student_id  Int
  rating      Int       @db.SmallInt
  title       String?   @db.VarChar(255)
  content     String?
  is_approved Boolean?  @default(false)
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @default(now()) @db.Timestamp(6)
  created_by  String?   @db.VarChar(50)
  updated_by  String?   @db.VarChar(50)
  version     Int?      @default(1)

  course  Course  @relation(fields: [course_id], references: [course_id], onDelete: Cascade, onUpdate: NoAction)
  student Student @relation(fields: [student_id], references: [student_id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([student_id, course_id], map: "uq_review")
  @@index([course_id], map: "idx_review_course")
  @@index([student_id], map: "idx_review_student")
  @@map("review")
}

model Role {
  role_id          Int       @id @default(autoincrement())
  role_name        String    @unique @db.VarChar(50)
  role_description String?
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  updated_at       DateTime? @default(now()) @db.Timestamp(6)
  created_by       String?   @db.VarChar(50)
  updated_by       String?   @db.VarChar(50)
  version          Int?      @default(1)

  rolePermission RolePermission[]
  userRole       UserRole[]

  @@map("role")
}

model RolePermission {
  role_id       Int
  permission_id Int
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  updated_at    DateTime? @default(now()) @db.Timestamp(6)
  created_by    String?   @db.VarChar(50)
  updated_by    String?   @db.VarChar(50)
  version       Int?      @default(1)

  permission Permission @relation(fields: [permission_id], references: [permission_id], onDelete: Cascade, onUpdate: NoAction)
  role       Role       @relation(fields: [role_id], references: [role_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([role_id, permission_id])
  @@map("role_permission")
}

model Student {
  student_id Int          @id @default(autoincrement())
  user_id    Int          @unique
  phone      String?      @db.VarChar(30)
  dob        DateTime?    @db.Date
  address    String?
  note       String?
  created_at DateTime?    @default(now()) @db.Timestamp(6)
  updated_at DateTime?    @default(now()) @db.Timestamp(6)
  created_by String?      @db.VarChar(50)
  updated_by String?      @db.VarChar(50)
  version    Int?         @default(1)
  enrollment Enrollment[]
  review     Review[]

  user User @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)

  @@map("student")
}

model User {
  user_id    Int       @id @default(autoincrement())
  username   String    @unique @db.VarChar(50)
  password   String    @db.VarChar(255)
  email      String    @unique @db.VarChar(100)
  full_name  String?   @db.VarChar(100)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  created_by String?   @db.VarChar(50)
  updated_by String?   @db.VarChar(50)
  version    Int?      @default(1)

  comment             Comment[]
  consultationRequest ConsultationRequest[]
  knowledge           Knowledge[]
  news                News[]
  refreshToken        RefreshToken[]
  student             Student?
  userRole            UserRole[]

  @@map("user")
}

model UserRole {
  user_id    Int
  role_id    Int
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  created_by String?   @db.VarChar(50)
  updated_by String?   @db.VarChar(50)
  version    Int?      @default(1)

  role Role @relation(fields: [role_id], references: [role_id], onDelete: Cascade, onUpdate: NoAction)
  user User @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_id, role_id])
  @@map("user_role")
}

enum ConsultStatus {
  PENDING
  CONTACTED
  SCHEDULED
  CLOSED
  CONVERTED
}

enum ContactMethod {
  PHONE
  EMAIL
  ZALO
  MESSENGER
  WHATSAPP
  OTHER
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum CourseMode {
  ONLINE
  OFFLINE
  HYBRID
}

enum EnrollmentStatus {
  INTERESTED
  REGISTERED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  UNPAID
  PAID
  PARTIAL
  REFUNDED
}

enum PublishStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}
