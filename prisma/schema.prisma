generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model about_me {
  about_id     Int       @id @default(autoincrement())
  org_name     String?   @db.VarChar(255)
  description  String?
  mission      String?
  vision       String?
  email        String?   @db.VarChar(255)
  phone        String?   @db.VarChar(50)
  hotline      String?   @db.VarChar(50)
  website      String?   @db.VarChar(255)
  address      String?
  facebook_url String?   @db.VarChar(255)
  zalo_url     String?   @db.VarChar(255)
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  updated_at   DateTime? @default(now()) @db.Timestamp(6)
  created_by   String?   @db.VarChar(50)
  updated_by   String?   @db.VarChar(50)
  version      Int?      @default(1)
  branch       branch[]
}

model branch {
  branch_id     Int       @id @default(autoincrement())
  about_id      Int
  branch_name   String    @db.VarChar(255)
  address       String
  phone         String?   @db.VarChar(50)
  latitude      Decimal?  @db.Decimal(10, 6)
  longitude     Decimal?  @db.Decimal(10, 6)
  opening_hours Json?
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  updated_at    DateTime? @default(now()) @db.Timestamp(6)
  created_by    String?   @db.VarChar(50)
  updated_by    String?   @db.VarChar(50)
  version       Int?      @default(1)
  about_me      about_me  @relation(fields: [about_id], references: [about_id], onDelete: Cascade, onUpdate: NoAction)

  @@index([about_id], map: "idx_branch_about")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model comment {
  comment_id        Int        @id @default(autoincrement())
  user_id           Int?
  course_id         Int?
  news_id           Int?
  knowledge_id      Int?
  parent_comment_id Int?
  content           String
  is_approved       Boolean?   @default(true)
  created_at        DateTime?  @default(now()) @db.Timestamp(6)
  updated_at        DateTime?  @default(now()) @db.Timestamp(6)
  created_by        String?    @db.VarChar(50)
  updated_by        String?    @db.VarChar(50)
  version           Int?       @default(1)
  course            course?    @relation(fields: [course_id], references: [course_id], onDelete: Cascade, onUpdate: NoAction)
  knowledge         knowledge? @relation(fields: [knowledge_id], references: [knowledge_id], onDelete: Cascade, onUpdate: NoAction)
  news              news?      @relation(fields: [news_id], references: [news_id], onDelete: Cascade, onUpdate: NoAction)
  comment           comment?   @relation("commentTocomment", fields: [parent_comment_id], references: [comment_id], onDelete: Cascade, onUpdate: NoAction)
  other_comment     comment[]  @relation("commentTocomment")
  user              user?      @relation(fields: [user_id], references: [user_id], onUpdate: NoAction)

  @@index([course_id], map: "idx_comment_course")
  @@index([knowledge_id], map: "idx_comment_knowledge")
  @@index([news_id], map: "idx_comment_news")
  @@index([parent_comment_id], map: "idx_comment_parent")
}

model commitment {
  commitment_id  Int       @id @default(autoincrement())
  title          String    @db.VarChar(255)
  content        String?
  is_active      Boolean?  @default(true)
  priority       Int?      @default(0)
  course_id      Int?
  effective_from DateTime? @db.Date
  effective_to   DateTime? @db.Date
  created_at     DateTime? @default(now()) @db.Timestamp(6)
  updated_at     DateTime? @default(now()) @db.Timestamp(6)
  created_by     String?   @db.VarChar(50)
  updated_by     String?   @db.VarChar(50)
  version        Int?      @default(1)
  course         course?   @relation(fields: [course_id], references: [course_id], onUpdate: NoAction)

  @@index([is_active], map: "idx_commitment_active")
  @@index([course_id], map: "idx_commitment_course")
}

model consultation_request {
  consultation_request_id Int             @id @default(autoincrement())
  full_name               String          @db.VarChar(255)
  email                   String          @db.VarChar(255)
  phone                   String?         @db.VarChar(30)
  course_id               Int?
  message                 String?
  contact_method          contact_method?
  status                  consult_status  @default(PENDING)
  preferred_time          DateTime?       @db.Timestamp(6)
  source                  String?         @db.VarChar(50)
  assigned_to             Int?
  created_at              DateTime?       @default(now()) @db.Timestamp(6)
  updated_at              DateTime?       @default(now()) @db.Timestamp(6)
  created_by              String?         @db.VarChar(50)
  updated_by              String?         @db.VarChar(50)
  version                 Int?            @default(1)
  user                    user?           @relation(fields: [assigned_to], references: [user_id], onUpdate: NoAction)
  course                  course?         @relation(fields: [course_id], references: [course_id], onUpdate: NoAction)

  @@index([course_id], map: "idx_consult_course")
  @@index([status], map: "idx_consult_status")
}

model course {
  course_id            Int                    @id @default(autoincrement())
  course_code          String?                @unique @db.VarChar(50)
  course_name          String                 @db.VarChar(255)
  slug                 String?                @unique @db.VarChar(255)
  short_description    String?
  description          String?
  level                course_level           @default(BEGINNER)
  mode                 course_mode            @default(ONLINE)
  language             String?                @default("en") @db.VarChar(50)
  price                Decimal?               @default(0) @db.Decimal(12, 2)
  duration_hours       Int?
  start_date           DateTime?              @db.Date
  end_date             DateTime?              @db.Date
  image_url            String?
  created_at           DateTime?              @default(now()) @db.Timestamp(6)
  updated_at           DateTime?              @default(now()) @db.Timestamp(6)
  created_by           String?                @db.VarChar(50)
  updated_by           String?                @db.VarChar(50)
  version              Int?                   @default(1)
  category             course_category?       @default(BASIS)
  comment              comment[]
  commitment           commitment[]
  consultation_request consultation_request[]
  enrollment           enrollment[]
  review               review[]

  @@index([level], map: "idx_course_level")
  @@index([mode], map: "idx_course_mode")
  @@index([slug], map: "idx_course_slug")
}

model enrollment {
  enrollment_id  Int               @id @default(autoincrement())
  student_id     Int
  course_id      Int
  status         enrollment_status @default(REGISTERED)
  payment_status payment_status    @default(UNPAID)
  payment_amount Decimal?          @default(0) @db.Decimal(12, 2)
  registered_at  DateTime?         @default(now()) @db.Timestamp(6)
  started_at     DateTime?         @db.Timestamp(6)
  completed_at   DateTime?         @db.Timestamp(6)
  created_at     DateTime?         @default(now()) @db.Timestamp(6)
  updated_at     DateTime?         @default(now()) @db.Timestamp(6)
  created_by     String?           @db.VarChar(50)
  updated_by     String?           @db.VarChar(50)
  version        Int?              @default(1)
  course         course            @relation(fields: [course_id], references: [course_id], onDelete: Cascade, onUpdate: NoAction)
  student        student           @relation(fields: [student_id], references: [student_id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([student_id, course_id], map: "uq_enrollment")
  @@index([course_id], map: "idx_enrollment_course")
  @@index([student_id], map: "idx_enrollment_student")
}

model knowledge {
  knowledge_id    Int            @id @default(autoincrement())
  title           String         @db.VarChar(255)
  slug            String         @unique @db.VarChar(255)
  content         String
  cover_image_url String?
  status          publish_status @default(DRAFT)
  published_at    DateTime?      @db.Timestamp(6)
  author_id       Int?
  created_at      DateTime?      @default(now()) @db.Timestamp(6)
  updated_at      DateTime?      @default(now()) @db.Timestamp(6)
  created_by      String?        @db.VarChar(50)
  updated_by      String?        @db.VarChar(50)
  version         Int?           @default(1)
  comment         comment[]
  user            user?          @relation(fields: [author_id], references: [user_id], onUpdate: NoAction)

  @@index([published_at], map: "idx_knowledge_published_at")
  @@index([status], map: "idx_knowledge_status")
}

model news {
  news_id         Int            @id @default(autoincrement())
  title           String         @db.VarChar(255)
  slug            String         @unique @db.VarChar(255)
  summary         String?
  content         String
  cover_image_url String?
  status          publish_status @default(DRAFT)
  published_at    DateTime?      @db.Timestamp(6)
  author_id       Int?
  created_at      DateTime?      @default(now()) @db.Timestamp(6)
  updated_at      DateTime?      @default(now()) @db.Timestamp(6)
  created_by      String?        @db.VarChar(50)
  updated_by      String?        @db.VarChar(50)
  version         Int?           @default(1)
  comment         comment[]
  user            user?          @relation(fields: [author_id], references: [user_id], onUpdate: NoAction)

  @@index([published_at], map: "idx_news_published_at")
  @@index([status], map: "idx_news_status")
}

model permission {
  permission_id          Int               @id @default(autoincrement())
  permission_name        String            @unique @db.VarChar(50)
  permission_description String?
  created_at             DateTime?         @default(now()) @db.Timestamp(6)
  updated_at             DateTime?         @default(now()) @db.Timestamp(6)
  created_by             String?           @db.VarChar(50)
  updated_by             String?           @db.VarChar(50)
  version                Int?              @default(1)
  role_permission        role_permission[]
}

model refresh_token {
  id              Int       @id @default(autoincrement())
  user_id         Int
  jti             String    @db.VarChar(100)
  token_hash      String    @db.VarChar(255)
  session_id      String    @db.Uuid
  device_name     String?   @db.VarChar(100)
  user_agent      String?
  ip              String?   @db.VarChar(45)
  expires_at      DateTime  @db.Timestamp(6)
  last_used_at    DateTime? @default(now()) @db.Timestamp(6)
  revoked_at      DateTime? @db.Timestamp(6)
  replaced_by_jti String?   @db.VarChar(100)
  created_at      DateTime? @default(now()) @db.Timestamp(6)
  updated_at      DateTime? @default(now()) @db.Timestamp(6)
  created_by      String?   @db.VarChar(50)
  updated_by      String?   @db.VarChar(50)
  version         Int?      @default(1)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model review {
  review_id   Int       @id @default(autoincrement())
  course_id   Int
  student_id  Int
  rating      Int       @db.SmallInt
  title       String?   @db.VarChar(255)
  content     String?
  is_approved Boolean?  @default(false)
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @default(now()) @db.Timestamp(6)
  created_by  String?   @db.VarChar(50)
  updated_by  String?   @db.VarChar(50)
  version     Int?      @default(1)
  course      course    @relation(fields: [course_id], references: [course_id], onDelete: Cascade, onUpdate: NoAction)
  student     student   @relation(fields: [student_id], references: [student_id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([student_id, course_id], map: "uq_review")
  @@index([course_id], map: "idx_review_course")
  @@index([student_id], map: "idx_review_student")
}

model role {
  role_id          Int               @id @default(autoincrement())
  role_name        String            @unique @db.VarChar(50)
  role_description String?
  created_at       DateTime?         @default(now()) @db.Timestamp(6)
  updated_at       DateTime?         @default(now()) @db.Timestamp(6)
  created_by       String?           @db.VarChar(50)
  updated_by       String?           @db.VarChar(50)
  version          Int?              @default(1)
  role_permission  role_permission[]
  user_role        user_role[]
}

model role_permission {
  role_id       Int
  permission_id Int
  created_at    DateTime?  @default(now()) @db.Timestamp(6)
  updated_at    DateTime?  @default(now()) @db.Timestamp(6)
  created_by    String?    @db.VarChar(50)
  updated_by    String?    @db.VarChar(50)
  version       Int?       @default(1)
  permission    permission @relation(fields: [permission_id], references: [permission_id], onDelete: Cascade, onUpdate: NoAction)
  role          role       @relation(fields: [role_id], references: [role_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([role_id, permission_id])
}

model student {
  student_id Int          @id @default(autoincrement())
  user_id    Int          @unique
  phone      String?      @db.VarChar(30)
  dob        DateTime?    @db.Date
  address    String?
  note       String?
  created_at DateTime?    @default(now()) @db.Timestamp(6)
  updated_at DateTime?    @default(now()) @db.Timestamp(6)
  created_by String?      @db.VarChar(50)
  updated_by String?      @db.VarChar(50)
  version    Int?         @default(1)
  enrollment enrollment[]
  review     review[]
  user       user         @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  user_id              Int                    @id @default(autoincrement())
  username             String                 @unique @db.VarChar(50)
  password             String                 @db.VarChar(255)
  email                String                 @unique @db.VarChar(100)
  full_name            String?                @db.VarChar(100)
  created_at           DateTime?              @default(now()) @db.Timestamp(6)
  updated_at           DateTime?              @default(now()) @db.Timestamp(6)
  created_by           String?                @db.VarChar(50)
  updated_by           String?                @db.VarChar(50)
  version              Int?                   @default(1)
  comment              comment[]
  consultation_request consultation_request[]
  knowledge            knowledge[]
  news                 news[]
  student              student?
  user_role            user_role[]
}

model user_role {
  user_id    Int
  role_id    Int
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  created_by String?   @db.VarChar(50)
  updated_by String?   @db.VarChar(50)
  version    Int?      @default(1)
  role       role      @relation(fields: [role_id], references: [role_id], onDelete: Cascade, onUpdate: NoAction)
  user       user      @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_id, role_id])
}

enum consult_status {
  PENDING
  CONTACTED
  SCHEDULED
  CLOSED
  CONVERTED
}

enum contact_method {
  PHONE
  EMAIL
  ZALO
  MESSENGER
  WHATSAPP
  OTHER
}

enum course_level {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum course_mode {
  ONLINE
  OFFLINE
  HYBRID
}

enum enrollment_status {
  INTERESTED
  REGISTERED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum payment_status {
  UNPAID
  PAID
  PARTIAL
  REFUNDED
}

enum publish_status {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum course_category {
  BASIS
  ADVANCE
  IPASS
}
