generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Permission {
  version                Int                @default(1)
  created_at             DateTime           @default(now())
  created_by             String?            @db.VarChar(50)
  permission_description String?
  permission_id          Int                @id @default(autoincrement())
  permission_name        String             @unique @db.VarChar(50)
  updated_at             DateTime
  updated_by             String?            @db.VarChar(50)
  RolesPermissions       RolesPermissions[]

  @@map("permissions")
}

model Post {
  title      String   @db.VarChar(255)
  content    String
  version    Int      @default(1)
  author_id  Int?
  created_at DateTime @default(now())
  created_by String?  @db.VarChar(50)
  post_id    Int      @id @default(autoincrement())
  updated_at DateTime
  updated_by String?  @db.VarChar(50)
  User       User?    @relation(fields: [author_id], references: [user_id])

  @@map("posts")
}

model Role {
  version          Int                @default(1)
  created_at       DateTime           @default(now())
  created_by       String?            @db.VarChar(50)
  role_description String?
  role_id          Int                @id @default(autoincrement())
  role_name        String             @unique @db.VarChar(50)
  updated_at       DateTime
  updated_by       String?            @db.VarChar(50)
  RolesPermissions RolesPermissions[]
  UsersRoles       UsersRoles[]

  @@map("roles")
}

model RolesPermissions {
  role_id       Int
  permission_id Int
  created_at    DateTime   @default(now())
  updated_at    DateTime
  created_by    String?    @db.VarChar(50)
  updated_by    String?    @db.VarChar(50)
  version       Int        @default(1)
  Permission    Permission @relation(fields: [permission_id], references: [permission_id], onDelete: Cascade)
  Role          Role       @relation(fields: [role_id], references: [role_id], onDelete: Cascade)

  @@id([role_id, permission_id])
  @@map("roles_permissions")
}

model User {
  username   String       @unique @db.VarChar(50)
  password   String       @db.VarChar(255)
  email      String       @unique @db.VarChar(100)
  version    Int          @default(1)
  created_at DateTime     @default(now())
  created_by String?      @db.VarChar(50)
  full_name  String?      @db.VarChar(100)
  updated_at DateTime
  updated_by String?      @db.VarChar(50)
  user_id    Int          @id @default(autoincrement())
  Post       Post[]
  UsersRoles UsersRoles[]

  @@map("users")
}

model UsersRoles {
  user_id    Int
  role_id    Int
  created_at DateTime @default(now())
  updated_at DateTime
  created_by String?  @db.VarChar(50)
  updated_by String?  @db.VarChar(50)
  version    Int      @default(1)
  Role       Role     @relation(fields: [role_id], references: [role_id], onDelete: Cascade)
  User       User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@id([user_id, role_id])
  @@map("users_roles")
}
